#
# Use this template if you do NOT want Scale-Out Computing on AWS to create the entire backend  (VPC, storage ...) environment
# You can edit this file manually or (recommended) use the web-based installer  https://github.com/mcrozes/soca-web-based-installer
#

AWSTemplateFormatVersion: 2010-09-09
Description: (SO0072) - Scale-Out Computing on AWS. Template version 2.5.0
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
            default: Install Location
        Parameters:
          - S3InstallBucket
          - S3InstallFolder

      - Label:
          default: Linux Distribution
        Parameters:
          - BaseOS
          - CustomAMI
          - SchedulerInstanceType

      - Label:
          default: Network/Security and Storage
        Parameters:
          - VpcCidr
          - VpcId
          - PublicSubnet1
          - PublicSubnet2
          - PublicSubnet3
          - PrivateSubnet1
          - PrivateSubnet2
          - PrivateSubnet3
          - ClientIp
          - SSHKeyPair
          - SocaLocalDomain
          - EFSAppsDns
          - EFSDataDns
          - SecurityGroupIdCompute
          - SecurityGroupIdScheduler

      - Label:
          default: Default LDAP user
        Parameters:
          - UserName
          - UserPassword

      - Label:
          default: Error handling
        Parameters:
          - ErrorSnsTopicEmail

    ParameterLabels:
      VpcCidr:
        default: Create your new VPC
      PublicVpc:
        default: PublicVpc
      ClientIp:
        default: Which IP addresses should have access?
      PrefixListId:
        default: Which prefix list should have access?
      CustomAMI:
        default: (Optional) Have your own AMI?
      SSHKeyPair:
        default: What's your SSH keypair?
      SocaLocalDomain:
        default: SocaLocalDomain
      BastionInstanceType:
        default: Instance type for your bastion server
      LdapInstanceType:
        default: Instance type for your LDAP server
      ProxyInstanceType:
        default: Instance type for your proxy server
      BaseOS:
        default: Linux Distro
      S3InstallBucket:
        default: S3 bucket with your SOCA installer
      S3InstallFolder:
        default: S3 folder where you uploaded the SOCA files
      SchedulerInstanceType:
        default: Instance type for your master host
      UserName:
        default: Username for your default LDAP user
      UserPassword:
        default: Password for your default LDAP user
      ErrorSnsTopicEmail:
        default: Optional email address that will be notified by SNS about deployment errors. If provided the SNS topic will automatically be subscribed but you will have to confirm the subscription before getting emails.

Parameters:
  CustomAMI:
    Type: String
    Description: If you use your own AMI, you still have to specify the base os (see above)

  SchedulerInstanceType:
    Default: m5.xlarge
    Type: String
    Description: Choose the type of instance to use for the scheduler

  BaseOS:
    Type: String
    "AllowedValues": [
      "centos7",
      "rhel7",
      "amazonlinux2",
    ]
    "Default": "amazonlinux2"
    "Description": IMPORTANT CENTOS USERS > You MUST subscribe to https://aws.amazon.com/marketplace/pp/B00O7WM7QW first if using CentOS

  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: Choose the Cidr block (/16 down to /24) you want to use for your VPC (eg 10.0.0.0/16 down to 10.0.0.0/24)
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/(1[6-9]|2[0-4])'
    ConstraintDescription: Your VPC must use x.x.x.x/16 - x.x.x.x/24 CIDR range

  PublicVpc:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC Id (must start with vpc-xxx)
    AllowedPattern: (vpc-[a-zA-Z0-9]*)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Private Subnet (must start with subnet-xxxx)
    AllowedPattern: (subnet-[a-zA-Z0-9]*)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Private Subnet (must start with subnet-xxxx)
    AllowedPattern: (subnet-[a-zA-Z0-9]*)

  PrivateSubnet3:
    Type: AWS::EC2::Subnet::Id
    Description: Private Subnet (must start with subnet-xxxx)
    AllowedPattern: (subnet-[a-zA-Z0-9]*)

  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Public Subnet (must start with subnet-xxxx)
    AllowedPattern: (subnet-[a-zA-Z0-9]*)

  PublicSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Public Subnet (must start with subnet-xxxx)
    AllowedPattern: (subnet-[a-zA-Z0-9]*)

  PublicSubnet3:
    Type: AWS::EC2::Subnet::Id
    Description: Public Subnet (must start with subnet-xxxx)
    AllowedPattern: (subnet-[a-zA-Z0-9]*)

  EFSAppsDns:
    Description: EFS DNS to mount as /apps (must start with fs-xxxx.efs.<region>.amazonaws.com)
    Type: String

  EFSDataDns:
    Type: String
    Description: EFS DNS to mount as /data (must start with fs-xxxx.efs.<region>.amazonaws.com)

  ClientIp:
    Type: String
    Description: Default IP(s) allowed to directly SSH into the scheduler and access ElasticSearch. 0.0.0.0/0 means ALL INTERNET access. You probably want to change it with your own IP/subnet (x.x.x.x/32 for your own ip or x.x.x.x/24 for range. Replace x.x.x.x with your own PUBLIC IP. You can get your public IP using tools such as https://ifconfig.co/). Make sure to keep it restrictive!
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})|(^$)'
    ConstraintDescription: ClientIP must be a valid IP or network range of the form x.x.x.x/x. If you want to add everyone (not recommended) use 0.0.0.0/0 otherwise specify your IP/NETMASK (e.g x.x.x/32 or x.x.x.x/24 for subnet range)

  PrefixListId:
    Type: String
    Description: Prefix list with IP(s) allowed to directly SSH into the scheduler and access ElasticSearch.
    AllowedPattern: '(pl-([a-zA-Z0-9]+))|(^$)'
    ConstraintDescription: PrefixListId must be blank or pl-[a-z][A-Z][0-9]+

  SSHKeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Default SSH pem keys used to SSH into the scheduler

  SocaLocalDomain:
    Type: String
    Description: Domain name for Route53 local zone that is used for local DNS entries.
    Default: 'soca.local'

  BastionInstanceType:
    Default: t3a.nano
    Type: String
    Description: Choose the type of instance to use for the bastion

  LdapInstanceType:
    Default: m5.large
    Type: String
    Description: Choose the type of instance to use for the LDAP server

  ProxyInstanceType:
    Default: m5.large
    Type: String
    Description: Choose the type of instance to use for the proxy

  S3InstallBucket:
    Type: String
    Default: "%%BUCKET_NAME%%"
    Description: Name of your S3 Bucket where you uploaded your install files
    AllowedPattern: '(?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)'
    ConstraintDescription: You must specify the bucket NAME only (no s3:// or https://bucket.s3.amazonaws.com)

  S3InstallFolder:
    Type: String
    Default: "%%SOLUTION_NAME%%/%%VERSION%%"
    Description: Name of the S3 folder where you uploaded SOCA

  EIPNat:
    Type: String
    Description: IP of the Nat Gateway

  SecurityGroupIdScheduler:
    Type: AWS::EC2::SecurityGroup::Id

  SecurityGroupIdCompute:
    Type: AWS::EC2::SecurityGroup::Id

  UserName:
    Type: String
    MinLength: 3

  UserPassword:
    NoEcho: true
    Type: String
    MinLength: 5
    MaxLength: 50
    AllowedPattern: "^[A-Za-z]+[a-zA-Z0-9@!#+_^{}\\[\\]()]*$"
    Description: "5 characters minimum. Must start with a letter. Special chars accepted: !#@+_^{}[]()"
    ConstraintDescription: "5 characters minimum. Must start with a letter. Special chars accepted: !#@+_^{}[]()"

  ErrorSnsTopicEmail:
    Type: String
    Default: ""

Mappings:
  Send:
    AnonymousUsage:
      Data: Yes # Must be either Yes or No. Do not use any single or double quotes. Refer to https://docs.aws.amazon.com/solutions/latest/scale-out-computing-on-aws/appendix-d.html

  Info:
    Data:
      ClusterIdPrefix: soca
      Version: 2.5.0
    User:
      centos7: centos
      amazonlinux2: ec2-user
      rhel7: ec2-user

  RegionMap:
    ap-east-1: # Hong Kong
      rhel7: ami-1a453e6b
      centos7: ami-68e59c19
      amazonlinux2: ami-570c7726
    ap-northeast-1: # Tokyo
      rhel7: ami-00b95502a4d51a07e
      centos7: ami-045f38c93733dd48d
      amazonlinux2: ami-0c3fd0f5d33134a76
    ap-northeast-2: # Seoul
      rhel7: ami-041b16ca28f036753
      centos7: ami-06cf2a72dadf92410
      amazonlinux2: ami-095ca789e0549777d
    ap-south-1: # Mumbai
      rhel7: ami-0963937a03c01ecd4
      centos7: ami-02e60be79e78fef21
      amazonlinux2: ami-0d2692b6acea72ee6
    ap-southeast-1: # Singapore
      rhel7: ami-055c55112e25b1f1f
      centos7: ami-0b4dd9d65556cac22
      amazonlinux2: ami-01f7527546b557442
    ap-southeast-2: # Sydney
      rhel7: ami-036b423b657376f5b
      centos7: ami-08bd00d7713a39e7d
      amazonlinux2: ami-0dc96254d5535925f
    ca-central-1: # Canada
      rhel7: ami-06ca3c0058d0275b3
      centos7: ami-033e6106180a626d0
      amazonlinux2: ami-0d4ae09ec9361d8ac
    eu-central-1: # Frankfurt
      rhel7: ami-09de4a4c670389e4b
      centos7: ami-04cf43aca3e6f3de3
      amazonlinux2: ami-0cc293023f983ed53
    eu-north-1: # Stockholm
      rhel7: ami-66f67f18
      centos7: ami-5ee66f20
      amazonlinux2: ami-3f36be41
    eu-west-1: # Dublin
      rhel7: ami-0202869bdd0fc8c75
      centos7: ami-0ff760d16d9497662
      amazonlinux2: ami-0bbc25e23a7640b9b
    eu-west-2: # London
      rhel7: ami-0188c0c5eddd2d032
      centos7: ami-0eab3a90fc693af19
      amazonlinux2: ami-0d8e27447ec2c8410
    eu-west-3: # Paris
      rhel7: ami-0c4224e392ec4e440
      centos7: ami-0e1ab783dc9489f34
      amazonlinux2: ami-0adcddd3324248c4c
    me-south-1: # Bahrain
      rhel7: AMI_NOT_ADDED_YET # /todo Update AMI ID when available
      centos7: ami-08529c51dbe004acb
      amazonlinux2: ami-0624cbc1598d12691
    us-east-1: # Virginia
      rhel7: ami-000db10762d0c4c05
      centos7: ami-02eac2c0129f6376b
      amazonlinux2: ami-0b898040803850657
    us-east-2: # Ohio
      rhel7: ami-094720ddca649952f
      centos7: ami-0f2b4fc905b0bd1f1
      amazonlinux2: ami-0d8f6eb4f641ef691
    us-west-1: # Northern California
      rhel7: ami-04642fc8fca1e8e67
      centos7: ami-074e2d6769f445be5
      amazonlinux2: ami-056ee704806822732
    us-west-2: # Oregon
      rhel7: ami-036affea69a1101c9
      centos7: ami-01ed306a12b7d1c96
      amazonlinux2: ami-082b5a644766e0e6f
    sa-east-1: # Sao Paulo
      rhel7: ami-05c1c16cac05a7c0b
      centos7: ami-0b8d86d4bf91850af
      amazonlinux2: ami-058943e7d9b9cabfb

Conditions:
  PublicVpc: !Equals [ !Ref PublicVpc, 'true' ]

  UseCustomAMI: !Not [!Equals [!Ref CustomAMI, ""]]

  ErrorSnsTopicEmail: !Not [!Equals [!Ref ErrorSnsTopicEmail, ""]]

Resources:
  # ============ BEGIN PRE-REQUISITE ============ #
  CheckPreRequisiteRole:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "* is reduced to minimal pattern"

    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub "lambda.${AWS::URLSuffix}"
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: PreRequisite
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DeleteLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":logs:", !Ref "AWS::Region", ":", !Ref  "AWS::AccountId", ":log-group:/aws/lambda/", !Join [ "-", [ !FindInMap [ Info, Data, ClusterIdPrefix ], !Ref "AWS::StackName"] ], "*"] ]

  CheckPreRequisiteLambda:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89 # Lambda functions should be deployed inside a VPC
            reason: "Does not require VPC access"
          - id: W92 # Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions
            reason: "Not required"
    Type: AWS::Lambda::Function
    Properties:
      Description: Check Pre-Requisite for SOCA
      FunctionName: !Join [ "-", [ !FindInMap [ Info, Data, ClusterIdPrefix ], !Ref "AWS::StackName", "PreRequisitesCheck"] ]
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt CheckPreRequisiteRole.Arn
      Runtime: python3.7
      Timeout: 180
      Tags:
        - Key: soca:ClusterId
          Value: !Join [ "-", [ !FindInMap [ Info, Data, ClusterIdPrefix ], !Ref "AWS::StackName"] ]
      Code:
        ZipFile: !Sub |
          import cfnresponse
          import re
          '''
          Check SOCA Pre-Requisite
          '''

          def lambda_handler(event, context):
            region = event['ResourceProperties']['Region']
            stack_name = event['ResourceProperties']['StackName']
            clusterIdPrefix = event['ResourceProperties']['ClusterIdPrefix']
            regions_blacklist = ['us-west-1'] # only 2 AZ

            if region in regions_blacklist:
              error_message = 'Sorry, this region is not yet supported by SOCA'
              cfnresponse.send(event, context, cfnresponse.FAILED, {'error': error_message}, error_message)
              return error_message

            # Strip clusterIdPrefix (soca) from front of Stackname to prevent things like "soca-soca-"
            stack_name = re.sub(r'^' + clusterIdPrefix + r'[-]?', r'', stack_name, flags=re.IGNORECASE)

            if stack_name.__len__() > 20:
              error_message = 'Please use a stack name smaller than 20 characters'
              cfnresponse.send(event, context, cfnresponse.FAILED, {'error': error_message}, error_message)
              return error_message

            clusterId = clusterIdPrefix + '-' + stack_name

            # Calculate PublicSubnetMaskPrefixBits and PrivateSubnetMaskPrefixBits
            # Example: VpcCidr: 10.0.0.0/17 --> VPCCidrPrefixBits = 17
            # PublicSubnetMaskPrefixBits = 4
            # PrivateSubnetMaskPrefixBits = 2
            # PublicSubnetMaskBits = 32 - 17 - 4 = 11 (PublicSubnetMask would be 32 - 11 = /21)
            # PrivateSubnetMaskBits = 32 - 17 - 2 = 13 (PrivateSubnetMask would be 32 - 13 = /19)

            VPCCidrPrefixBits = event['ResourceProperties']['VPCCidrPrefixBits']
            PublicSubnetMaskPrefixBits = event['ResourceProperties']['PublicSubnetMaskPrefixBits']
            PrivateSubnetMaskPrefixBits = event['ResourceProperties']['PrivateSubnetMaskPrefixBits']
            PublicSubnetMaskBits = 32 - int(VPCCidrPrefixBits) - int(PublicSubnetMaskPrefixBits)
            PrivateSubnetMaskBits = 32 - int(VPCCidrPrefixBits) - int(PrivateSubnetMaskPrefixBits)

            responseData = {'ClusterId': clusterId.lower(),
                            'PublicSubnetMaskBits': PublicSubnetMaskBits,
                            'PrivateSubnetMaskBits': PrivateSubnetMaskBits}

            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'Pre-Requisites OK')

  CheckSOCAPreRequisite:
    DependsOn: CheckPreRequisiteLambda
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt CheckPreRequisiteLambda.Arn
      Region: !Ref "AWS::Region"
      StackName: !Ref "AWS::StackName"
      ClusterIdPrefix: !FindInMap [ Info, Data, ClusterIdPrefix ]
      VPCCidrPrefixBits: !Select [1, !Split [ "/", !Ref VpcCidr ]]
      PublicSubnetMaskPrefixBits: 4
      PrivateSubnetMaskPrefixBits: 2

  # ============ END PRE-REQUISITE ============ #

  ErrorSnsTopic:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W47 # SNS Topic should specify KmsMasterKeyId property
            reason: "Not required"
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Join [ "-", [ !GetAtt CheckSOCAPreRequisite.ClusterId, "error"] ]
      DisplayName: !Join [ "-", [ !GetAtt CheckSOCAPreRequisite.ClusterId, "error"] ]
      Tags:
        - Key: soca:ClusterId
          Value: !GetAtt CheckSOCAPreRequisite.ClusterId

  ErrorSnsTopicSubscription:
    Condition: ErrorSnsTopicEmail
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref ErrorSnsTopic
      Endpoint: !Ref ErrorSnsTopicEmail
      Protocol: email
      # FilterPolicy doesn't work for CloudFormation notifications so create a different SNS topic filtered by Lambda

  # Lambda to tag ec2 resources

  TagEC2ResourceLambdaRole:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "* is reduced to minimal pattern"
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: TagEC2ResourceLambdaRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DeleteLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":logs:", !Ref "AWS::Region", ":", !Ref  "AWS::AccountId", ":log-group:/aws/lambda/", !Join [ "-", [ !FindInMap [ Info, Data, ClusterIdPrefix ], !Ref "AWS::StackName"] ], "*"] ]
              - Effect: Allow
                Action:
                  - iam:ListRoles
                Resource: "*"
                Condition:
                  "StringEqualsIfExists":
                      "aws:PrincipalAccount": !Sub "${AWS::AccountId}"

              - Effect: Allow
                Action:
                  - ec2:CreateTags
                Resource:
                  - '*'

  TagEC2ResourceLambda:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89 # Lambda functions should be deployed inside a VPC
            reason: "Does not require VPC access"
          - id: W92 # Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions
            reason: "Not required"
    Type: AWS::Lambda::Function
    Properties:
      Description: Tag EC2 resource
      FunctionName: !Join [ "-", [!GetAtt CheckSOCAPreRequisite.ClusterId, TagEC2Resource]]
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt TagEC2ResourceLambdaRole.Arn
      Runtime: python3.7
      Timeout: 180
      Tags:
        - Key: soca:ClusterId
          Value: !GetAtt CheckSOCAPreRequisite.ClusterId
      Environment:
        Variables:
          SnsTopic: !Ref ErrorSnsTopic
      Code:
        ZipFile: !Sub |
          import cfnresponse
          import boto3
          import json
          import logging
          import os
          '''
          Tag EC2 Resource
          '''
          logging.getLogger().setLevel(logging.INFO)
          def lambda_handler(event, context):
            try:
              logging.info("event: {}".format(event))
              snsTopic = os.environ['SnsTopic']
              resourceId = event['ResourceProperties']['ResourceId']
              logging.info("resourceId: {}".format(resourceId))
              tags = event['ResourceProperties']['Tags']
              logging.info("tags: {}".format(tags))

              ec2_client = boto3.client('ec2')
              ec2_client.create_tags(
                  Resources=[resourceId],
                  Tags=tags
              )
            except Exception as e:
              logging.exception("Unhandled exception")
              cfnresponse.send(event, context, cfnresponse.FAILED, {'error': str(e)}, str(e))

            cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, "")

  Network:
    DependsOn: CheckSOCAPreRequisite
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        ExistingResources: true
        VpcCidr: !Ref VpcCidr
        ClusterId: !GetAtt CheckSOCAPreRequisite.ClusterId
        SocaLocalDomain: !Ref SocaLocalDomain
        PublicSubnetMaskBits: !GetAtt CheckSOCAPreRequisite.PublicSubnetMaskBits
        PrivateSubnetMaskBits: !GetAtt CheckSOCAPreRequisite.PrivateSubnetMaskBits
      TimeoutInMinutes: 30
      TemplateURL: !Join [ "/", [!Sub "https://s3.${AWS::URLSuffix}", !Ref S3InstallBucket, !Ref S3InstallFolder, "templates/Network.template"] ]

  Security:
    DependsOn: Network
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        VpcId: !Ref VpcId
        SocaLocalDomain: !Ref SocaLocalDomain
        HostedZoneId: !GetAtt Network.Outputs.HostedZoneId
        AL2ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", amazonlinux2]
        SSHKeyPair: !Ref SSHKeyPair
        BastionInstanceType: !Ref BastionInstanceType
        ProxyInstanceType: !Ref ProxyInstanceType
        ProxySubnetId: !GetAtt Network.Outputs.PublicSubnet1
        NoProxy: !Sub "localhost,127.0.0.1,169.254.169.254,169.254.170.2,${VpcCidr},.${AWS::Region}.amazonaws.com"
        UpdateDnsLambdaArn: !GetAtt Network.Outputs.UpdateDnsLambdaArn
        HostedZoneId: !GetAtt Network.Outputs.HostedZoneId
        ClientIp: !Ref ClientIp
        PrefixListId: !Ref PrefixListId
        ClusterId: !GetAtt CheckSOCAPreRequisite.ClusterId
        S3InstallBucket: !Ref S3InstallBucket
        S3InstallFolder: !Ref S3InstallFolder
        SchedulerPublicIP: !GetAtt Network.Outputs.SchedulerPublicIP
        EIPNat: !GetAtt Network.Outputs.EIPNat
      TemplateURL: !Join [ "/", [!Sub "https://s3.${AWS::URLSuffix}", !Ref S3InstallBucket, !Ref S3InstallFolder, "templates/Security.template"] ]
      TimeoutInMinutes: 30

  Storage:
    Type: AWS::CloudFormation::Stack
    DependsOn: Security
    Properties:
      Parameters:
        VpcId: !GetAtt Network.Outputs.VpcId
        SchedulerSecurityGroup: !GetAtt Security.Outputs.SchedulerSecurityGroup
        ComputeNodeSecurityGroup: !GetAtt Security.Outputs.ComputeNodeSecurityGroup
        PrivateSubnet1: !GetAtt Network.Outputs.PrivateSubnet1
        PrivateSubnet2: !GetAtt Network.Outputs.PrivateSubnet2
        PrivateSubnet3: !GetAtt Network.Outputs.PrivateSubnet3
        ClusterId: !Join [ "-", [ !FindInMap [ Info, Data, ClusterIdPrefix ], !Ref "AWS::StackName"] ]
      TemplateURL: !Join [ "/", [!Sub "https://s3.${AWS::URLSuffix}", !Ref S3InstallBucket, !Ref S3InstallFolder, "templates/Storage.template"] ]
      TimeoutInMinutes: 30

  Scheduler:
    DependsOn: Security
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        SocaLocalDomain: !Ref SocaLocalDomain
        HostedZoneId: !GetAtt Network.Outputs.HostedZoneId
        UpdateDnsLambdaArn: !GetAtt Network.Outputs.UpdateDnsLambdaArn
        SSHKeyPair: !Ref SSHKeyPair
        ProxyPrivateDnsName: !GetAtt Security.Outputs.ProxyPrivateDnsName
        NoProxy: !GetAtt Security.Outputs.NoProxy
        SchedulerInstanceType: !Ref SchedulerInstanceType
        SubnetId: !Ref PublicSubnet1
        SecurityGroupId: !Ref SecurityGroupIdScheduler
        SchedulerIAMInstanceProfile: !GetAtt Security.Outputs.SchedulerIAMInstanceProfile
        S3InstallFolder: !Ref S3InstallFolder
        S3Bucket: !Ref S3InstallBucket
        Version: !FindInMap [ Info, Data, Version ]
        ClusterId: !GetAtt CheckSOCAPreRequisite.ClusterId
        EFSDataDns: !Ref EFSDataDns
        EFSAppsDns: !Ref EFSAppsDns
        ImageId: !If [UseCustomAMI, !Ref CustomAMI, !FindInMap [RegionMap, !Ref "AWS::Region", !Ref BaseOS]]
        BaseOS: !Ref BaseOS
        UserName: !Ref UserName
        UserPassword: !Ref UserPassword
      TemplateURL: !Join [ "/", [!Sub "https://s3.${AWS::URLSuffix}", !Ref S3InstallBucket, !Ref S3InstallFolder, "templates/Scheduler.template"] ]
      TimeoutInMinutes: 60

  Analytics:
    DependsOn: Scheduler
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        SchedulerSecurityGroup: !Ref SecurityGroupIdScheduler
        PublicSubnet1: !Ref PublicSubnet1
        ClusterId: !GetAtt CheckSOCAPreRequisite.ClusterId
        ClientIp: !Ref ClientIp
        PrefixListId: !Ref PrefixListId
        SchedulerPublicIP: !GetAtt Scheduler.Outputs.SchedulerPublicIP
        EIPNat: !Ref EIPNat
      TemplateURL: !Join [ "/", [!Sub "https://s3.${AWS::URLSuffix}", !Ref S3InstallBucket, !Ref S3InstallFolder, "templates/Analytics.template"] ]
      TimeoutInMinutes: 30

  Viewer:
    DependsOn: Analytics
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        LoadBalancerSecurityGroup: !GetAtt Security.Outputs.LoadBalancerSecurityGroup
        SchedulerSecurityGroup: !Ref SecurityGroupIdScheduler
        PublicSubnet1: !Ref PublicSubnet1
        PublicSubnet2: !Ref PublicSubnet2
        PublicSubnet3: !Ref PublicSubnet3
        ClusterId: !GetAtt CheckSOCAPreRequisite.ClusterId
        VpcId: !Ref VpcId
        SchedulerInstanceId: !GetAtt Scheduler.Outputs.SchedulerInstanceId
        SchedulerIAMRole: !GetAtt Security.Outputs.SchedulerIAMRole
        LambdaACMIAMRoleArn: !GetAtt Security.Outputs.LambdaACMIAMRoleArn
        S3InstallBucket: !Ref S3InstallBucket
        S3InstallFolder: !Ref S3InstallFolder
      TemplateURL: !Join [ "/", [!Sub "https://s3.${AWS::URLSuffix}", !Ref S3InstallBucket, !Ref S3InstallFolder, "templates/Viewer.template"] ]
      TimeoutInMinutes: 30

  Configuration:
    DependsOn: Viewer
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        SocaLocalDomain: !Ref SocaLocalDomain
        ProxyPrivateDnsName: !GetAtt Security.Outputs.ProxyPrivateDnsName
        NoProxy: !GetAtt Security.Outputs.NoProxy
        SchedulerInstanceId: !GetAtt Scheduler.Outputs.SchedulerInstanceId
        SchedulerPrivateDnsName: !GetAtt Scheduler.Outputs.SchedulerPrivateDnsName
        SchedulerPrivateIP: !GetAtt Scheduler.Outputs.SchedulerPrivateIP
        SchedulerPublicIP: !GetAtt Scheduler.Outputs.SchedulerPublicIP
        SchedulerSecurityGroup: !Ref SecurityGroupIdScheduler
        ComputeNodeIAMRoleArn: !GetAtt Security.Outputs.ComputeNodeIAMRoleArn
        ComputeNodeIAMRole: !GetAtt Security.Outputs.ComputeNodeIAMRole
        ComputeNodeInstanceProfileArn: !GetAtt Security.Outputs.ComputeNodeInstanceProfileArn
        SchedulerIAMRoleArn: !GetAtt Security.Outputs.SchedulerIAMRoleArn
        SpotFleetIAMRoleArn: !GetAtt Security.Outputs.SpotFleetIAMRoleArn
        SchedulerIAMRole: !GetAtt Security.Outputs.SchedulerIAMRole
        ComputeNodeSecurityGroup: !Ref SecurityGroupIdCompute
        VpcId: !Ref VpcId
        PublicSubnet1: !Ref PublicSubnet1
        PublicSubnet2: !Ref PublicSubnet2
        PublicSubnet3: !Ref PublicSubnet3
        PrivateSubnet1: !Ref PrivateSubnet1
        PrivateSubnet2: !Ref PrivateSubnet2
        PrivateSubnet3: !Ref PrivateSubnet3
        EFSDataDns: !Ref EFSDataDns
        EFSAppsDns: !Ref EFSAppsDns
        S3InstallFolder: !Ref S3InstallFolder
        Version: !FindInMap [ Info, Data, Version ]
        S3Bucket: !Ref S3InstallBucket
        ClusterId: !GetAtt CheckSOCAPreRequisite.ClusterId
        SSHKeyPair: !Ref SSHKeyPair
        ImageId: !If [UseCustomAMI, !Ref CustomAMI, !FindInMap [RegionMap, !Ref "AWS::Region", !Ref BaseOS]]
        ESDomainEndpoint: !GetAtt Analytics.Outputs.ESDomainEndpoint
        LoadBalancerDNSName: !GetAtt Viewer.Outputs.LoadBalancerDNSName
        LoadBalancerArn: !GetAtt Viewer.Outputs.LoadBalancerArn
        BaseOS: !Ref BaseOS
        SolutionMetricsRoleArn: !GetAtt Security.Outputs.SolutionMetricsRoleArn
        DefaultMetricCollection: !FindInMap [ Send, AnonymousUsage, Data ]
      TemplateURL: !Join [ "/", [!Sub "https://s3.${AWS::URLSuffix}", !Ref S3InstallBucket, !Ref S3InstallFolder, "templates/Configuration.template"] ]
      TimeoutInMinutes: 60

Outputs:
  BastionDnsName:
    Value: !GetAtt Security.Outputs.BastionDnsName
  SchedulerPublicIP:
    Value: !GetAtt Scheduler.Outputs.SchedulerPublicIP
  LDAPMasterUsername:
    Value: admin
  LDAPMasterPassword:
    Value: /root/OpenLdapAdminPassword.txt
  AnalyticsDashboard:
    Value: !Join [ "", [ "https://", !GetAtt Analytics.Outputs.ESDomainEndpoint, "/_plugin/kibana/"]]
  ConnectionString:
    Value: !Join [ "", [ "ssh -i ", !Ref SSHKeyPair, ".pem ", !FindInMap [ Info, User, !Ref BaseOS ], "@", !GetAtt Scheduler.Outputs.SchedulerPublicIP]]
  WebUserInterface:
    Value: !Join [ "", [ "https://", !GetAtt Viewer.Outputs.LoadBalancerDNSName]]
  BaseOS:
    Value: !Ref BaseOS
  BaseAMI:
    Value: !If [UseCustomAMI, !Ref CustomAMI, !FindInMap [RegionMap, !Ref "AWS::Region", !Ref BaseOS]]
  Version:
    Value: !FindInMap [ Info, Data, Version ]

  # Centos7SOCAImageArn:
  #   Value: !GetAtt ImageBuilder.Outputs.Centos7SOCAImageArn
  # Centos7SOCAImageId:
  #   Value: !GetAtt ImageBuilder.Outputs.Centos7SOCAImageId
  # Centos7EDAImageArn:
  #   Value: !GetAtt ImageBuilder.Outputs.Centos7EDAImageArn
  # Centos7EDAImageId:
  #   Value: !GetAtt ImageBuilder.Outputs.Centos7EDAImageId
