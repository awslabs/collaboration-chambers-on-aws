#
# Use this template if you want Scale-Out Computing on AWS to be deployed into an existing VPC.
#

AWSTemplateFormatVersion: 2010-09-09
Description: (SO0072) - Scale-Out Computing on AWS. Template version 2.6.1
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
            default: Install Location
        Parameters:
          - S3InstallBucket
          - S3InstallFolder

      - Label:
          default: Cluster Configuration
        Parameters:
          - RepositoryBucket
          - RepositoryFolder
          - BastionInstanceType
          - ProxyInstanceType
          - SchedulerInstanceType
          - LdapInstanceType

      - Label:
          default: Default Compute Node Linux Distribution
        Parameters:
          - BaseOS
          - CustomAMI

      - Label:
          default: Network and Security
        Parameters:
          - VpcCidr
          - PublicVpc
          - VpcId
          - PublicSubnet1
          - PublicSubnet2
          - PublicSubnet3
          - PrivateSubnet1
          - PrivateSubnet2
          - PrivateSubnet3
          - CreateS3VpcEndpoint
          - CreateVpcEndpoints
          - NatEIP1
          - NatEIP2
          - NatEIP3
          - ClientIp
          - PrefixListId
          - SSHKeyPair
          - SocaLocalDomain

      - Label:
          default: Default LDAP user
        Parameters:
          - UserName
          - UserPasswordSsmParameterName

      - Label:
          default: Error handling
        Parameters:
          - ErrorSnsTopicEmail

    ParameterLabels:
      VpcCidr:
        default: Create your new VPC
      PublicVpc:
        default: PublicVpc
      ClientIp:
        default: Which IP addresses should have access?
      PrefixListId:
        default: Which prefix list should have access?
      CustomAMI:
        default: (Optional) Custom default AMI for Compute Nodes
      SSHKeyPair:
        default: What's your SSH keypair?
      SocaLocalDomain:
        default: SocaLocalDomain
      RepositoryBucket:
        default: S3 Bucket with yum repository and other SOCA code
      RepositoryFolder:
        default: S3 Bucket folder with yum repository mirror and other SOCA code
      BastionInstanceType:
        default: Instance type for your bastion server
      LdapInstanceType:
        default: Instance type for your LDAP server
      ProxyInstanceType:
        default: Instance type for your proxy server
      BaseOS:
        default: Compute Node Linux Distro
      S3InstallBucket:
        default: S3 bucket with your SOCA installer
      S3InstallFolder:
        default: S3 folder where you uploaded the SOCA files
      SchedulerInstanceType:
        default: Instance type for your master host
      UserName:
        default: Username for your default LDAP user
      UserPasswordSsmParameterName:
        default: Password for your default LDAP user
      ErrorSnsTopicEmail:
        default: Optional email address that will be notified by SNS about deployment errors. If provided the SNS topic will automatically be subscribed but you will have to confirm the subscription before getting emails.

Parameters:
  CustomAMI:
    Type: String
    Description: If you use your own AMI, you still have to specify the base os (see above)
    Default: ""

  SchedulerInstanceType:
    Default: m5.xlarge
    Type: String
    Description: Choose the type of instance to use for the scheduler

  BaseOS:
    Type: String
    "AllowedValues": [
      "centos7",
      "rhel7",
      "amazonlinux2",
    ]
    "Default": "centos7"
    "Description": IMPORTANT CENTOS USERS > You MUST subscribe to https://aws.amazon.com/marketplace/pp/B00O7WM7QW first if using CentOS

  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: Choose the Cidr block (/16 down to /24) you want to use for your VPC (eg 10.0.0.0/16 down to 10.0.0.0/24)
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/(1[6-9]|2[0-4])'
    ConstraintDescription: Your VPC must use x.x.x.x/16 - x.x.x.x/24 CIDR range

  PublicVpc:
    Type: String
    Default: true
    AllowedValues:
      - true
      - false

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC Id (must start with vpc-xxx)
    AllowedPattern: (vpc-[a-zA-Z0-9]*)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Private Subnet (must start with subnet-xxxx)
    AllowedPattern: (subnet-[a-zA-Z0-9]*)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Private Subnet (must start with subnet-xxxx)
    AllowedPattern: (subnet-[a-zA-Z0-9]*)

  PrivateSubnet3:
    Type: String
    Description: Private Subnet (must start with subnet-xxxx)
    Default: ''
    AllowedPattern: '(subnet-[a-zA-Z0-9]*)|(^$)'

  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Public Subnet (must start with subnet-xxxx)
    AllowedPattern: (subnet-[a-zA-Z0-9]*)

  PublicSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Public Subnet (must start with subnet-xxxx)
    AllowedPattern: (subnet-[a-zA-Z0-9]*)

  PublicSubnet3:
    Type: String
    Description: Public Subnet (must start with subnet-xxxx)
    Default: ''
    AllowedPattern: '(subnet-[a-zA-Z0-9]*)|(^$)'

  CreateS3VpcEndpoint:
    Type: String
    Description: Create S3 VPC endpoint. Set to false if it already exists.
    Default: true
    AllowedValues:
      - true
      - false

  CreateVpcEndpoints:
    Type: String
    Description: Create VPC endpoints. Set to false if they already exist.
    Default: true
    AllowedValues:
      - true
      - false

  NatEIP1:
    Type: String
    Default: ""
    Description: NAT Public IP address for security groups. Include 1 EIP for each NAT.
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})|(^$)'
    ConstraintDescription: NAT EIP must be a valid IP address of the form x.x.x.x

  NatEIP2:
    Type: String
    Default: ""
    Description: NAT Public IP address for security groups. Include 1 EIP for each NAT.
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})|(^$)'
    ConstraintDescription: NAT EIP must be a valid IP address of the form x.x.x.x

  NatEIP3:
    Type: String
    Default: ""
    Description: NAT Public IP address for security groups. Include 1 EIP for each NAT.
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})|(^$)'
    ConstraintDescription: NAT EIP must be a valid IP address of the form x.x.x.x

  ClientIp:
    Type: String
    Default: ""
    Description: Default IP(s) allowed to directly SSH into the scheduler and access ElasticSearch. 0.0.0.0/0 means ALL INTERNET access. You probably want to change it with your own IP/subnet (x.x.x.x/32 for your own ip or x.x.x.x/24 for range. Replace x.x.x.x with your own PUBLIC IP. You can get your public IP using tools such as https://ifconfig.co/). Make sure to keep it restrictive!
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})|(^$)'
    ConstraintDescription: ClientIP must be a valid IP or network range of the form x.x.x.x/x. If you want to add everyone (not recommended) use 0.0.0.0/0 otherwise specify your IP/NETMASK (e.g x.x.x/32 or x.x.x.x/24 for subnet range)

  PrefixListId:
    Type: String
    Default: ""
    Description: Prefix list with IP(s) allowed to directly SSH into the scheduler and access ElasticSearch.
    AllowedPattern: '(pl-([a-zA-Z0-9]+))|(^$)'
    ConstraintDescription: PrefixListId must be blank or pl-[a-z][A-Z][0-9]+

  SSHKeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Default SSH pem keys used to SSH into the scheduler

  SocaLocalDomain:
    Type: String
    Description: Domain name for Route53 local zone that is used for local DNS entries.
    Default: 'soca.local'

  RepositoryBucket:
    Default: ""
    Type: String
    Description: S3 bucket with repository mirror

  RepositoryFolder:
    Default: ""
    Type: String
    Description: S3 bucket folder with repository mirror

  BastionInstanceType:
    # A t3a.nano doesn't have enough memory to run ansible
    Default: t3a.micro
    Type: String
    Description: Choose the type of instance to use for the bastion

  LdapInstanceType:
    Default: m5.large
    Type: String
    Description: Choose the type of instance to use for the LDAP server

  ProxyInstanceType:
    Default: m5.large
    Type: String
    Description: Choose the type of instance to use for the proxy

  S3InstallBucket:
    Type: String
    Default: %%BUCKET_NAME%%
    Description: Name of your S3 Bucket where you uploaded your install files
    AllowedPattern: '(?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)'
    ConstraintDescription: You must specify the bucket NAME only (no s3:// or https://bucket.s3.amazonaws.com)

  S3InstallFolder:
    Type: String
    Default: %%SOLUTION_NAME%%/%%VERSION%%
    Description: Name of the S3 folder where you uploaded SOCA

  UserName:
    Type: String
    MinLength: 3

  UserPasswordSsmParameterName:
    Type: AWS::SSM::Parameter::Name
    MinLength: 1
    Description: "SSM Parameter with the password"

  ErrorSnsTopicEmail:
    Type: String
    Default: ""

Mappings:
  Send:
    AnonymousUsage:
      Data: Yes # Must be either Yes or No. Do not use any single or double quotes. Refer to https://docs.aws.amazon.com/solutions/latest/scale-out-computing-on-aws/appendix-d.html

  Info:
    Data:
      ClusterIdPrefix: soca
      Version: 2.6.1
    User:
      centos7: centos
      amazonlinux2: ec2-user
      rhel7: ec2-user

  RegionMap:
    af-south-1:
      amazonlinux2: ami-0c6e605ab94c1af57
      centos7: ami-0b761332115c38669
    ap-east-1:
      amazonlinux2: ami-d60844a7
      centos7: ami-09611bd6fa5dd0e3d
      rhel7: ami-1a453e6b
    ap-northeast-1:
      amazonlinux2: ami-01748a72bed07727c
      centos7: ami-0ddea5e0f69c193a4
      rhel7: ami-0e3e6ca71a19ccf06
    ap-northeast-2:
      amazonlinux2: ami-0094965d55b3bb1ff
      centos7: ami-0e4214f08b51e23cc
      rhel7: ami-0f84aff229263c1fc
    ap-south-1:
      amazonlinux2: ami-04b1ddd35fd71475a
      centos7: ami-0ffc7af9c06de0077
      rhel7: ami-0b105c57e305d9064
    ap-southeast-1:
      amazonlinux2: ami-00b8d9cb8a7161e41
      centos7: ami-0adfdaea54d40922b
      rhel7: ami-031290b4bd9eaa715
    ap-southeast-2:
      amazonlinux2: ami-06ce513624b435a22
      centos7: ami-03d56f451ca110e99
      rhel7: ami-06d2821bfc76dcda3
    ca-central-1:
      amazonlinux2: ami-0c3e7f50c89a372ae
      centos7: ami-0a7c5b189b6460115
      rhel7: ami-0a43efe505004e592
    eu-central-1:
      amazonlinux2: ami-03c3a7e4263fd998c
      centos7: ami-08b6d44b4f6f7b279
      rhel7: ami-0fc86555914f6a9f2
    eu-north-1:
      amazonlinux2: ami-02cb52d7ba9887a93
      centos7: ami-0358414bac2039369
      rhel7: ami-8833bbf6
    eu-south-1:
      amazonlinux2: ami-080807541452b0410
      centos7: ami-0fe3899b62205176a
      rhel7: ami-004f2ac6013e4fcfb
    eu-west-1:
      amazonlinux2: ami-01720b5f421cf0179
      centos7: ami-04f5641b0d178a27a
      rhel7: ami-04c89a19fea29f1f0
    eu-west-2:
      amazonlinux2: ami-0e80a462ede03e653
      centos7: ami-0b22fcaf3564fb0c9
      rhel7: ami-06fe0c124aedcef5f
    eu-west-3:
      amazonlinux2: ami-00798d7180f25aac2
      centos7: ami-072ec828dae86abe5
      rhel7: ami-08295de7534115935
    me-south-1:
      amazonlinux2: ami-0032aa87bb75498ea
      centos7: ami-0ac17dcdd6f6f4eb6
      rhel7: ami-0e845cba4071a4a1a
    sa-east-1:
      amazonlinux2: ami-022082b7f1da62478
      centos7: ami-02334c45dd95ca1fc
      rhel7: ami-06efd558d6a5fb959
    us-east-1:
      amazonlinux2: ami-0be2609ba883822ec
      centos7: ami-00e87074e52e6c9f9
      rhel7: ami-08a7d2bfef687328f
    us-east-2:
      amazonlinux2: ami-0a0ad6b70e61be944
      centos7: ami-00f8e2c955f7ffa9b
      rhel7: ami-0e166e72fda655c63
    us-west-1:
      amazonlinux2: ami-03130878b60947df3
      centos7: ami-08d2d8b00f270d03b
      rhel7: ami-056efb42b219f9abb
    us-west-2:
      amazonlinux2: ami-0a36eb8fadc976275
      centos7: ami-0686851c4e7b1a8e1
      rhel7: ami-02deb4589e0f0d95e

Conditions:
  CreateVpc: !Equals [ !Ref VpcId, '' ]

  PublicVpc: !Equals [ !Ref PublicVpc, 'true' ]

  HasPrivateSubnet3: !Not [!Equals [!Ref PrivateSubnet3, ""]]

  UseCustomAMI: !Not [!Equals [!Ref CustomAMI, ""]]

  ErrorSnsTopicEmail: !Not [!Equals [!Ref ErrorSnsTopicEmail, ""]]

Resources:
  # ============ BEGIN PRE-REQUISITE ============ #
  CheckPreRequisiteRole:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "* is reduced to minimal pattern"

    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub "lambda.${AWS::URLSuffix}"
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: PreRequisite
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DeleteLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":logs:", !Ref "AWS::Region", ":", !Ref  "AWS::AccountId", ":log-group:/aws/lambda/", !Join [ "-", [ !FindInMap [ Info, Data, ClusterIdPrefix ], !Ref "AWS::StackName"] ], "*"] ]
              - Effect: Allow
                Action:
                  - iam:ListRoles
                Resource: "*"
                Condition:
                  "StringEqualsIfExists":
                      "aws:PrincipalAccount": !Sub "${AWS::AccountId}"


  CheckPreRequisiteLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Check Pre-Requisite for SOCA
      FunctionName: !Join [ "-", [ !FindInMap [ Info, Data, ClusterIdPrefix ], !Ref "AWS::StackName", "PreRequisitesCheck"] ]
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt CheckPreRequisiteRole.Arn
      Runtime: python3.7
      Timeout: 180
      Tags:
        - Key: soca:ClusterId
          Value: !Join [ "-", [ !FindInMap [ Info, Data, ClusterIdPrefix ], !Ref "AWS::StackName"] ]
      Code:
        ZipFile: !Sub |
          import cfnresponse
          import re
          import boto3
          '''
          Check SOCA Pre-Requisite
          '''

          def lambda_handler(event, context):
            region = event['ResourceProperties']['Region']
            stack_name = event['ResourceProperties']['StackName']
            clusterIdPrefix = event['ResourceProperties']['ClusterIdPrefix']
            regions_blacklist = ['us-west-1'] # only 2 AZ

            if region in regions_blacklist:
              error_message = 'Sorry, this region is not yet supported by SOCA'
              cfnresponse.send(event, context, cfnresponse.FAILED, {'error': error_message}, error_message)
              return error_message

            # Strip clusterIdPrefix (soca) from front of Stackname to prevent things like "soca-soca-"
            stack_name = re.sub(r'^' + clusterIdPrefix + r'[-]?', r'', stack_name, flags=re.IGNORECASE)

            if stack_name.__len__() > 20:
              error_message = 'Please use a stack name smaller than 20 characters'
              cfnresponse.send(event, context, cfnresponse.FAILED, {'error': error_message}, error_message)
              return error_message

            clusterId = clusterIdPrefix + '-' + stack_name

            # Calculate PublicSubnetMaskPrefixBits and PrivateSubnetMaskPrefixBits
            # Example: VpcCidr: 10.0.0.0/17 --> VPCCidrPrefixBits = 17
            # PublicSubnetMaskPrefixBits = 4
            # PrivateSubnetMaskPrefixBits = 2
            # PublicSubnetMaskBits = 32 - 17 - 4 = 11 (PublicSubnetMask would be 32 - 11 = /21)
            # Added new condition to reduce size of PublicSubnetMask to a maximum of /26
            # PrivateSubnetMaskBits = 32 - 17 - 2 = 13 (PrivateSubnetMask would be 32 - 13 = /19)

            VPCCidrPrefixBits = event['ResourceProperties']['VPCCidrPrefixBits']
            PublicSubnetMaskPrefixBits = event['ResourceProperties']['PublicSubnetMaskPrefixBits']
            PrivateSubnetMaskPrefixBits = event['ResourceProperties']['PrivateSubnetMaskPrefixBits']
            PublicSubnetMaskBits = 32 - int(VPCCidrPrefixBits) - int(PublicSubnetMaskPrefixBits)
            if PublicSubnetMaskBits > 6: PublicSubnetMaskBits = 6
            PrivateSubnetMaskBits = 32 - int(VPCCidrPrefixBits) - int(PrivateSubnetMaskPrefixBits)

            iam_client = boto3.client('iam')
            es_roles = iam_client.list_roles(PathPrefix='/aws-service-role/es.amazonaws.com')
            if len(es_roles['Roles']) == 0:
                CreateESServiceRole = "True"
            else:
                CreateESServiceRole = "False"

            responseData = {'ClusterId': clusterId.lower(),
                            'PublicSubnetMaskBits': PublicSubnetMaskBits,
                            'PrivateSubnetMaskBits': PrivateSubnetMaskBits,
                            'CreateESServiceRole': CreateESServiceRole}

            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'Pre-Requisites OK')

  CheckSOCAPreRequisite:
    DependsOn: CheckPreRequisiteLambda
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt CheckPreRequisiteLambda.Arn
      Region: !Ref "AWS::Region"
      StackName: !Ref "AWS::StackName"
      ClusterIdPrefix: !FindInMap [ Info, Data, ClusterIdPrefix ]
      VPCCidrPrefixBits: !Select [1, !Split [ "/", !Ref VpcCidr ]]
      PublicSubnetMaskPrefixBits: 4
      PrivateSubnetMaskPrefixBits: 2

  # ============ END PRE-REQUISITE ============ #

  ErrorSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Join [ "-", [ !GetAtt CheckSOCAPreRequisite.ClusterId, "error"] ]
      DisplayName: !Join [ "-", [ !GetAtt CheckSOCAPreRequisite.ClusterId, "error"] ]
      Tags:
        - Key: soca:ClusterId
          Value: !GetAtt CheckSOCAPreRequisite.ClusterId

  ErrorSnsTopicSubscription:
    Condition: ErrorSnsTopicEmail
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref ErrorSnsTopic
      Endpoint: !Ref ErrorSnsTopicEmail
      Protocol: email
      # FilterPolicy doesn't work for CloudFormation notifications so create a different SNS topic filtered by Lambda

  # Topic for nested stacks.
  # These are filtered by Lambda to only notify on errors.
  # See https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-rollback-email/
  # CloudFormation doesn't set message attributes so FilterPolicy doesn't work

  CloudFormationSnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Join [ "-", [ !GetAtt CheckSOCAPreRequisite.ClusterId, "Cfn"] ]
      DisplayName: !Join [ "-", [ !GetAtt CheckSOCAPreRequisite.ClusterId, "Cfn"] ]
      Tags:
        - Key: soca:ClusterId
          Value: !GetAtt CheckSOCAPreRequisite.ClusterId

  CloudFormationSnsTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref CloudFormationSnsTopic
      Endpoint: !GetAtt CloudFormationSnsFilterLambda.Arn
      Protocol: lambda
      # FilterPolicy doesn't actually work because CloudFormation doesn't specify message attributes.

  # Lambda to filter CloudFormation SNS notifications

  CloudFormationSnsFilterLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudFormationSnsFilter
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DeleteLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":logs:", !Ref "AWS::Region", ":", !Ref  "AWS::AccountId", ":log-group:/aws/lambda/", !Join [ "-", [ !FindInMap [ Info, Data, ClusterIdPrefix ], !Ref "AWS::StackName"] ], "*"] ]
              - Effect: Allow
                Action:
                  - iam:ListRoles
                Resource: "*"
                Condition:
                  "StringEqualsIfExists":
                      "aws:PrincipalAccount": !Sub "${AWS::AccountId}"

              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Ref ErrorSnsTopic
                Condition:
                  "StringEqualsIfExists":
                      "aws:PrincipalAccount": !Sub "${AWS::AccountId}"

  # Allow it to be triggered by SNS topic
  CloudFormationSnsFilterLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CloudFormationSnsFilterLambda
      SourceArn: !Ref CloudFormationSnsTopic
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com

  CloudFormationSnsFilterLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Filter CloudFormation messages
      FunctionName: !Join [ "-", [!GetAtt CheckSOCAPreRequisite.ClusterId, CloudFormationSnsFilter]]
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt CloudFormationSnsFilterLambdaRole.Arn
      Runtime: python3.7
      Timeout: 180
      Tags:
        - Key: soca:ClusterId
          Value: !GetAtt CheckSOCAPreRequisite.ClusterId
      Environment:
        Variables:
          SnsTopic: !Ref ErrorSnsTopic
      Code:
        ZipFile: !Sub |
          import cfnresponse
          import boto3
          import json
          import logging
          import os
          '''
          Filter CloudFormation messages
          '''
          logging.getLogger().setLevel(logging.INFO)
          def lambda_handler(event, context):
            try:
              logging.info("event: {}".format(event))
              snsTopic = os.environ['SnsTopic']
              for record in event['Records']:
                subject = record['Sns']['Subject']
                message = record['Sns']['Message']
                logging.info("message: {}".format(message))
                lines = message.split('\n')
                for line in lines:
                  logging.info(line)
                  try:
                    k, v = line.split('=', 1)
                  except:
                    continue
                  if k == 'ResourceStatus':
                    resourceStatus = v.strip('\'')
                logging.info("resourceStatus: {}".format(resourceStatus))
                if resourceStatus in ['CREATE_COMPLETE', 'UPDATE_IN_PROGRESS', 'UPDATE_COMPLETE_CLEANUP_IN_PROGRESS', 'UPDATE_COMPLETE']:
                  logging.info("Ignoring message")
                  continue
                sns_client = boto3.client('sns')
                sns_client.publish(TopicArn=snsTopic, Message=message), Subject=subject)
            except:
              logging.exception("Unhandled exception")

  # Lambda to tag ec2 resources

  TagEC2ResourceLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: TagEC2ResourceLambdaRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DeleteLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":logs:", !Ref "AWS::Region", ":", !Ref  "AWS::AccountId", ":log-group:/aws/lambda/", !Join [ "-", [ !FindInMap [ Info, Data, ClusterIdPrefix ], !Ref "AWS::StackName"] ], "*"] ]
              - Effect: Allow
                Action:
                  - iam:ListRoles
                Resource: "*"
                Condition:
                  "StringEqualsIfExists":
                      "aws:PrincipalAccount": !Sub "${AWS::AccountId}"

              - Effect: Allow
                Action:
                  - ec2:CreateTags
                Resource:
                  - '*'

  TagEC2ResourceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Tag EC2 resource
      FunctionName: !Join [ "-", [!GetAtt CheckSOCAPreRequisite.ClusterId, TagEC2Resource]]
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt TagEC2ResourceLambdaRole.Arn
      Runtime: python3.7
      Timeout: 180
      Tags:
        - Key: soca:ClusterId
          Value: !GetAtt CheckSOCAPreRequisite.ClusterId
      Environment:
        Variables:
          SnsTopic: !Ref ErrorSnsTopic
      Code:
        ZipFile: !Sub |
          import cfnresponse
          import boto3
          import json
          import logging
          import os
          '''
          Tag EC2 Resource
          '''
          logging.getLogger().setLevel(logging.INFO)
          def lambda_handler(event, context):
            try:
              logging.info("event: {}".format(event))
              snsTopic = os.environ['SnsTopic']
              resourceId = event['ResourceProperties']['ResourceId']
              logging.info("resourceId: {}".format(resourceId))
              tags = event['ResourceProperties']['Tags']
              logging.info("tags: {}".format(tags))

              ec2_client = boto3.client('ec2')
              ec2_client.create_tags(
                  Resources=[resourceId],
                  Tags=tags
              )
            except Exception as e:
              logging.exception("Unhandled exception")
              cfnresponse.send(event, context, cfnresponse.FAILED, {'error': str(e)}, str(e))

            cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, "")


  Network:
    DependsOn: CheckSOCAPreRequisite
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        VpcCidr: !Ref VpcCidr
        PublicVpc: !Ref PublicVpc
        ClusterId: !GetAtt CheckSOCAPreRequisite.ClusterId
        SocaLocalDomain: !Ref SocaLocalDomain
        PublicSubnetMaskBits: !GetAtt CheckSOCAPreRequisite.PublicSubnetMaskBits
        PrivateSubnetMaskBits: !GetAtt CheckSOCAPreRequisite.PrivateSubnetMaskBits
        VpcIdParam: !Ref VpcId
        PublicSubnet1Param: !Ref PublicSubnet1
        PublicSubnet2Param: !Ref PublicSubnet2
        PublicSubnet3Param: !Ref PublicSubnet3
        PrivateSubnet1Param: !Ref PrivateSubnet1
        PrivateSubnet2Param: !Ref PrivateSubnet2
        PrivateSubnet3Param: !Ref PrivateSubnet3
        NatEIP1Param: !Ref NatEIP1
        NatEIP2Param: !Ref NatEIP2
        NatEIP3Param: !Ref NatEIP3
      TimeoutInMinutes: 30
      TemplateURL: !Join [ "/", [!Sub "https://s3.${AWS::URLSuffix}", !Ref S3InstallBucket, !Ref S3InstallFolder, "templates/Network.template"] ]
      NotificationARNs:
        - !Ref CloudFormationSnsTopic

  Security:
    DependsOn: Network
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        CreateVpc: !If [CreateVpc, 'true', 'false']
        VpcId: !GetAtt Network.Outputs.VpcId
        VpcCidr: !Ref VpcCidr
        PublicVpc: !Ref PublicVpc
        SocaLocalDomain: !Ref SocaLocalDomain
        HostedZoneId: !GetAtt Network.Outputs.HostedZoneId
        AL2ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", amazonlinux2]
        SSHKeyPair: !Ref SSHKeyPair
        RepositoryBucket: !Ref RepositoryBucket
        RepositoryFolder: !Ref RepositoryFolder
        BastionInstanceType: !Ref BastionInstanceType
        ProxyInstanceType: !Ref ProxyInstanceType
        ProxySubnetId: !If [ PublicVpc, !GetAtt Network.Outputs.PublicSubnet1, "" ]
        # VPC endpoints aren't proxied. Can't exclude .amazonaws.com because FSX doesn't have an endpoint.
        # Interface endpoints resolve to local addresses but apps use DNS name so must exclude them.
        # S3 is a gateway endpoint so need explict no proxy.
        NoProxy: !Sub "localhost,127.0.0.1,169.254.169.254,169.254.170.2,${VpcCidr},cloudformation.${AWS::Region}.amazonaws.com,datasync.${AWS::Region}.amazonaws.com,ec2.${AWS::Region}.amazonaws.com,ec2messages.${AWS::Region}.amazonaws.com,elasticfilesystem.${AWS::Region}.amazonaws.com,logs.${AWS::Region}.amazonaws.com,s3.amazonaws.com,s3.${AWS::Region}.amazonaws.com,secretsmanager.${AWS::Region}.amazonaws.com,ssm.${AWS::Region}.amazonaws.com,ssmmessages.${AWS::Region}.amazonaws.com,sns.${AWS::Region}.amazonaws.com,storagegateway.${AWS::Region}.amazonaws.com,.elb.amazonaws.com"
        UpdateDnsLambdaArn: !GetAtt Network.Outputs.UpdateDnsLambdaArn
        HostedZoneId: !GetAtt Network.Outputs.HostedZoneId
        PublicSubnet1: !If [ PublicVpc, !GetAtt Network.Outputs.PublicSubnet1, "" ]
        PublicSubnet2: !If [ PublicVpc, !GetAtt Network.Outputs.PublicSubnet2, "" ]
        PublicSubnet3: !If [ PublicVpc, !GetAtt Network.Outputs.PublicSubnet3, "" ]
        PrivateSubnet1: !GetAtt Network.Outputs.PrivateSubnet1
        PrivateSubnet2: !GetAtt Network.Outputs.PrivateSubnet2
        PrivateSubnet3: !GetAtt Network.Outputs.PrivateSubnet3
        CreateS3VpcEndpoint: !Ref CreateS3VpcEndpoint
        CreateVpcEndpoints: !Ref CreateVpcEndpoints
        PrivateRouteTable: !GetAtt Network.Outputs.PrivateRouteTable
        ClientIp: !Ref ClientIp
        PrefixListId: !Ref PrefixListId
        ClusterId: !GetAtt CheckSOCAPreRequisite.ClusterId
        S3InstallBucket: !Ref S3InstallBucket
        S3InstallFolder: !Ref S3InstallFolder
        NatEIP1: !If [ PublicVpc, !GetAtt Network.Outputs.NatEIP1, "" ]
        NatEIP2: !If [ PublicVpc, !GetAtt Network.Outputs.NatEIP2, "" ]
        NatEIP3: !If [ PublicVpc, !GetAtt Network.Outputs.NatEIP3, "" ]
        CreateESServiceRole: !GetAtt CheckSOCAPreRequisite.CreateESServiceRole
        ErrorSnsTopicArn: !Ref ErrorSnsTopic
        ProxyCACertParameterName: !Join [ "", ["/", !GetAtt CheckSOCAPreRequisite.ClusterId, "/proxy/cacert" ] ]
        TagEC2ResourceLambdaArn: !GetAtt TagEC2ResourceLambda.Arn
      TemplateURL: !Join [ "/", [!Sub "https://s3.${AWS::URLSuffix}", !Ref S3InstallBucket, !Ref S3InstallFolder, "templates/Security.template"] ]
      TimeoutInMinutes: 30
      NotificationARNs:
        - !Ref CloudFormationSnsTopic

  Storage:
    Type: AWS::CloudFormation::Stack
    DependsOn: Security
    Properties:
      Parameters:
        VpcId: !GetAtt Network.Outputs.VpcId
        SchedulerSecurityGroup: !GetAtt Security.Outputs.SchedulerSecurityGroup
        ComputeNodeSecurityGroup: !GetAtt Security.Outputs.ComputeNodeSecurityGroup
        PrivateSubnet1: !GetAtt Network.Outputs.PrivateSubnet1
        PrivateSubnet2: !GetAtt Network.Outputs.PrivateSubnet2
        PrivateSubnet3: !GetAtt Network.Outputs.PrivateSubnet3
        ClusterId: !Join [ "-", [ !FindInMap [ Info, Data, ClusterIdPrefix ], !Ref "AWS::StackName"] ]
      TemplateURL: !Join [ "/", [!Sub "https://s3.${AWS::URLSuffix}", !Ref S3InstallBucket, !Ref S3InstallFolder, "templates/Storage.template"] ]
      TimeoutInMinutes: 30
      NotificationARNs:
        - !Ref CloudFormationSnsTopic

  Scheduler:
    DependsOn: Storage
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        PublicVpc: !Ref PublicVpc
        SocaLocalDomain: !Ref SocaLocalDomain
        HostedZoneId: !GetAtt Network.Outputs.HostedZoneId
        UpdateDnsLambdaArn: !GetAtt Network.Outputs.UpdateDnsLambdaArn
        SSHKeyPair: !Ref SSHKeyPair
        ProxyPrivateDnsName: !If [ PublicVpc, !GetAtt Security.Outputs.ProxyPrivateDnsName, "" ]
        NoProxy: !GetAtt Security.Outputs.NoProxy
        ProxyCACertParameterName: !If [ PublicVpc, !GetAtt Security.Outputs.ProxyCACertParameterName, "" ]
        RepositoryBucket: !Ref RepositoryBucket
        RepositoryFolder: !Ref RepositoryFolder
        SchedulerInstanceType: !Ref SchedulerInstanceType
        SubnetId: !GetAtt Network.Outputs.PrivateSubnet1
        SecurityGroupId: !GetAtt Security.Outputs.SchedulerSecurityGroup
        SchedulerIAMInstanceProfile: !GetAtt Security.Outputs.SchedulerIAMInstanceProfile
        S3InstallBucket: !Ref S3InstallBucket
        S3InstallFolder: !Ref S3InstallFolder
        Version: !FindInMap [ Info, Data, Version ]
        ClusterId: !GetAtt CheckSOCAPreRequisite.ClusterId
        EFSDataDns: !GetAtt Storage.Outputs.EFSDataDns
        EFSAppsDns: !GetAtt Storage.Outputs.EFSAppsDns
        AL2ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", amazonlinux2]
        ComputeNodeCustomAMI: !If [UseCustomAMI, !Ref CustomAMI, !FindInMap [RegionMap, !Ref "AWS::Region", !Ref BaseOS]]
        ComputeNodeBaseOS: !Ref BaseOS
        UserName: !Ref UserName
        UserPassword: !Ref UserPasswordSsmParameterName
        ErrorSnsTopicArn: !Ref ErrorSnsTopic
      TemplateURL: !Join [ "/", [!Sub "https://s3.${AWS::URLSuffix}", !Ref S3InstallBucket, !Ref S3InstallFolder, "templates/Scheduler.template"] ]
      TimeoutInMinutes: 60
      NotificationARNs:
        - !Ref CloudFormationSnsTopic

  Analytics:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        ElasticSearchSecurityGroup: !GetAtt Security.Outputs.ElasticSearchSecurityGroup
        VpcId: !GetAtt Network.Outputs.VpcId
        PrivateSubnet1: !GetAtt Network.Outputs.PrivateSubnet1
        PrivateSubnet2: !GetAtt Network.Outputs.PrivateSubnet2
        ClusterId: !GetAtt CheckSOCAPreRequisite.ClusterId
      TemplateURL: !Join [ "/", [!Sub "https://s3.${AWS::URLSuffix}", !Ref S3InstallBucket, !Ref S3InstallFolder, "templates/Analytics.template"] ]
      TimeoutInMinutes: 30
      NotificationARNs:
        - !Ref CloudFormationSnsTopic

  Viewer:
    DependsOn:
      - Scheduler
      - Analytics
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        PublicVpc: !Ref PublicVpc
        LoadBalancerSecurityGroup: !GetAtt Security.Outputs.LoadBalancerSecurityGroup
        SchedulerSecurityGroup: !GetAtt Security.Outputs.SchedulerSecurityGroup
        PublicSubnet1: !If [ PublicVpc, !GetAtt Network.Outputs.PublicSubnet1, "" ]
        PublicSubnet2: !If [ PublicVpc, !GetAtt Network.Outputs.PublicSubnet2, "" ]
        PublicSubnet3: !If [ PublicVpc, !GetAtt Network.Outputs.PublicSubnet3, "" ]
        PrivateSubnet1: !GetAtt Network.Outputs.PrivateSubnet1
        PrivateSubnet2: !GetAtt Network.Outputs.PrivateSubnet2
        PrivateSubnet3: !GetAtt Network.Outputs.PrivateSubnet3
        ClusterId: !GetAtt CheckSOCAPreRequisite.ClusterId
        VpcId: !GetAtt Network.Outputs.VpcId
        SchedulerInstanceId: !GetAtt Scheduler.Outputs.SchedulerInstanceId
        SchedulerIAMRole: !GetAtt Security.Outputs.SchedulerIAMRole
        LambdaACMIAMRoleArn: !GetAtt Security.Outputs.LambdaACMIAMRoleArn
        ESDomainIPAddresses: !GetAtt Analytics.Outputs.ESDomainIPAddresses
        GetELBPrivateIPLambdaArn: !GetAtt Security.Outputs.GetELBPrivateIPLambdaArn
        WebUIEndpointServiceConnectionSnsArn: !Ref ErrorSnsTopic
        TagEC2ResourceLambdaArn: !GetAtt TagEC2ResourceLambda.Arn
        S3InstallBucket: !Ref S3InstallBucket
        S3InstallFolder: !Ref S3InstallFolder
      TemplateURL: !Join [ "/", [!Sub "https://s3.${AWS::URLSuffix}", !Ref S3InstallBucket, !Ref S3InstallFolder, "templates/Viewer.template"] ]
      TimeoutInMinutes: 30
      NotificationARNs:
        - !Ref CloudFormationSnsTopic

  Configuration:
    DependsOn: Viewer
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        SocaLocalDomain: !Ref SocaLocalDomain
        ProxyPrivateDnsName: !If [ PublicVpc, !GetAtt Security.Outputs.ProxyPrivateDnsName, "" ]
        NoProxy: !GetAtt Security.Outputs.NoProxy
        ProxyCACertParameterName: !GetAtt Security.Outputs.ProxyCACertParameterName
        ProxyCACert: !GetAtt Security.Outputs.ProxyCACertParameterName
        RepositoryBucket: !Ref RepositoryBucket
        RepositoryFolder: !Ref RepositoryFolder
        SchedulerInstanceId: !GetAtt Scheduler.Outputs.SchedulerInstanceId
        SchedulerPrivateDnsName: !GetAtt Scheduler.Outputs.SchedulerPrivateDnsName
        SchedulerPrivateIP: !GetAtt Scheduler.Outputs.SchedulerPrivateIP
        SchedulerSecurityGroup: !GetAtt Security.Outputs.SchedulerSecurityGroup
        ComputeNodeIAMRoleArn: !GetAtt Security.Outputs.ComputeNodeIAMRoleArn
        ComputeNodeIAMRole: !GetAtt Security.Outputs.ComputeNodeIAMRole
        ComputeNodeInstanceProfileArn: !GetAtt Security.Outputs.ComputeNodeInstanceProfileArn
        SchedulerIAMRoleArn: !GetAtt Security.Outputs.SchedulerIAMRoleArn
        SpotFleetIAMRoleArn: !GetAtt Security.Outputs.SpotFleetIAMRoleArn
        SchedulerIAMRole: !GetAtt Security.Outputs.SchedulerIAMRole
        ComputeNodeSecurityGroup: !GetAtt Security.Outputs.ComputeNodeSecurityGroup
        VpcId: !GetAtt Network.Outputs.VpcId
        PublicVpc: !Ref PublicVpc
        PublicSubnet1: !If [ PublicVpc, !GetAtt Network.Outputs.PublicSubnet1, "" ]
        PublicSubnet2: !If [ PublicVpc, !GetAtt Network.Outputs.PublicSubnet2, "" ]
        PublicSubnet3: !If [ PublicVpc, !GetAtt Network.Outputs.PublicSubnet3, "" ]
        PrivateSubnet1: !GetAtt Network.Outputs.PrivateSubnet1
        PrivateSubnet2: !GetAtt Network.Outputs.PrivateSubnet2
        PrivateSubnet3: !GetAtt Network.Outputs.PrivateSubnet3
        EFSDataDns: !GetAtt Storage.Outputs.EFSDataDns
        EFSAppsDns: !GetAtt Storage.Outputs.EFSAppsDns
        S3InstallFolder: !Ref S3InstallFolder
        Version: !FindInMap [ Info, Data, Version ]
        S3Bucket: !Ref S3InstallBucket
        ClusterId: !GetAtt CheckSOCAPreRequisite.ClusterId
        SSHKeyPair: !Ref SSHKeyPair
        ImageId: !If [UseCustomAMI, !Ref CustomAMI, !FindInMap [RegionMap, !Ref "AWS::Region", !Ref BaseOS]]
        ESDomainEndpoint: !GetAtt Analytics.Outputs.ESDomainEndpoint
        LoadBalancerDNSName: !GetAtt Viewer.Outputs.LoadBalancerDNSName
        LoadBalancerArn: !GetAtt Viewer.Outputs.LoadBalancerArn
        BaseOS: !Ref BaseOS
        SolutionMetricsRoleArn: !GetAtt Security.Outputs.SolutionMetricsRoleArn
        DefaultMetricCollection: !FindInMap [ Send, AnonymousUsage, Data ]
        ErrorSnsTopicArn: !Ref ErrorSnsTopic
      TemplateURL: !Join [ "/", [!Sub "https://s3.${AWS::URLSuffix}", !Ref S3InstallBucket, !Ref S3InstallFolder, "templates/Configuration.template"] ]
      TimeoutInMinutes: 60
      NotificationARNs:
        - !Ref CloudFormationSnsTopic

Outputs:
  BastionDnsName:
    Condition: PublicVpc
    Value: !GetAtt Security.Outputs.BastionDnsName
  LDAPMasterUsername:
    Value: admin
  LDAPMasterPassword:
    Value: /root/OpenLdapAdminPassword.txt
  AnalyticsDashboard:
    Value: !Join [ "", [ "https://", !GetAtt Viewer.Outputs.LoadBalancerDNSName, "/_plugin/kibana/"]]
  SSHConnectionString:
    Condition: PublicVpc
    Value: !Join [ "", [ "ssh -i ", !Ref SSHKeyPair, ".pem ", !FindInMap [ Info, User, amazonlinux2 ], "@", !GetAtt Security.Outputs.BastionDnsName]]
  WebUserInterface:
    Value: !Join [ "", [ "https://", !GetAtt Viewer.Outputs.LoadBalancerDNSName]]
  WebUIEndpointServiceName:
    Value: !GetAtt Viewer.Outputs.WebUIEndpointServiceName
  ComputeNodeBaseOS:
    Value: !Ref BaseOS
  ComputeNodeCustomAMI:
    Value: !If [UseCustomAMI, !Ref CustomAMI, !FindInMap [RegionMap, !Ref "AWS::Region", !Ref BaseOS]]
  Version:
    Value: !FindInMap [ Info, Data, Version ]

  # Exports that can be used by other stacks such as CollaborationVpcEndpoint.template
  S3InstallBucket:
    Value: !Ref S3InstallBucket
    Export:
      Name: !Sub "${AWS::StackName}-S3InstallBucket"

  S3InstallFolder:
    Value: !Ref S3InstallFolder
    Export:
      Name: !Sub "${AWS::StackName}-S3InstallFolder"

  CloudFormationSnsTopic:
    Value: !Ref CloudFormationSnsTopic
    Export:
      Name: !Sub "${AWS::StackName}-CloudFormationSnsTopic"

  CollaborationEndpointServiceNameExport:
    Value: !GetAtt Viewer.Outputs.WebUIEndpointServiceName
    Export:
      Name: !Sub "${AWS::StackName}-CollaborationEndpointServiceName"

  VpcId:
    Value: !GetAtt Network.Outputs.VpcId
    Export:
      Name: !Sub "${AWS::StackName}-VpcId"

  ClusterId:
    Value: !GetAtt CheckSOCAPreRequisite.ClusterId
    Export:
      Name: !Sub "${AWS::StackName}-ClusterId"

  SocaLocalDomain:
    Value: !Ref SocaLocalDomain
    Export:
      Name: !Sub "${AWS::StackName}-SocaLocalDomain"

  PrivateSubnet1:
    Value: !GetAtt Network.Outputs.PrivateSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet1"

  PrivateSubnet2:
    Value: !GetAtt Network.Outputs.PrivateSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet2"

  PrivateSubnet3:
    Condition: HasPrivateSubnet3
    Value: !GetAtt Network.Outputs.PrivateSubnet3
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet3"

  HostedZoneId:
    Value: !GetAtt Network.Outputs.HostedZoneId
    Export:
      Name: !Sub "${AWS::StackName}-HostedZoneId"

  UpdateDnsLambdaArn:
    Value: !GetAtt Network.Outputs.UpdateDnsLambdaArn
    Export:
      Name: !Sub "${AWS::StackName}-UpdateDnsLambdaArn"

  TagEC2ResourceLambdaArn:
    Value: !GetAtt TagEC2ResourceLambda.Arn
    Export:
      Name: !Sub "${AWS::StackName}-TagEC2ResourceLambdaArn"

  VpcEndpointSecurityGroup:
    Value: !GetAtt Security.Outputs.VpcEndpointSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-VpcEndpointSecurityGroup"
