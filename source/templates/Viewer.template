AWSTemplateFormatVersion: 2010-09-09
Description: (SOCA) - Manage DCV sessions.
Parameters:
  PublicVpc:
    Type: String
    AllowedValues:
      - true
      - false

  LoadBalancerSecurityGroup:
    Type: String

  SchedulerSecurityGroup:
    Type: String

  VpcId:
    Type: String

  PublicSubnet1:
    Type: String

  PublicSubnet2:
    Type: String

  PublicSubnet3:
    Type: String

  PrivateSubnet1:
    Type: String

  PrivateSubnet2:
    Type: String

  PrivateSubnet3:
    Type: String

  ClusterId:
    Type: String

  SchedulerInstanceId:
    Type: String

  SchedulerIAMRole:
    Type: String

  LambdaACMIAMRoleArn:
    Type: String

  ESDomainIPAddresses:
    Type: String

  GetELBPrivateIPLambdaArn:
    Type: String

  WebUIEndpointServiceConnectionSnsArn:
    Type: String

  TagEC2ResourceLambdaArn:
    Type: String

  S3InstallBucket:
    Type: String

  S3InstallFolder:
    Type: String

Conditions:
  PublicVpc: !Equals [ !Ref PublicVpc, 'true' ]

  HasPublicSubnet3: !Not [!Equals [!Ref PublicSubnet3, ""]]

  HasPrivateSubnet3: !Not [!Equals [!Ref PrivateSubnet3, ""]]

  CreateWebUINLBEni3: !Or [{Condition: HasPublicSubnet3}, {Condition: HasPrivateSubnet3}]

Resources:

  SchedulerELBPolicy:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: "* is reduced to minimal pattern"

    DependsOn: ApplicationLoadBalancer
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: SchedulerLoadBalancerPermissions
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - elasticloadbalancing:DeleteRule
            Resource:  !Sub "arn:${AWS::Partition}:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:listener-rule/app/soca*/*"

          - Effect: Allow
            Action:
              - elasticloadbalancing:CreateRule
            Resource: !Ref HTTPSLoadBalancerListener

          - Effect: Allow
            Action:
              - elasticloadbalancing:DeleteTargetGroup
              - elasticloadbalancing:CreateTargetGroup
              - elasticloadbalancing:RegisterTargets
              - elasticloadbalancing:AddTags
            Resource: !Sub "arn:${AWS::Partition}:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/soca*/*"

      Roles:
         - !Ref SchedulerIAMRole


  # During first install, ALB must be listening on port 443 HTTPS for DCV
  # Because of that, a ACM certificate MUST be created and uploaded to ACM
  # Today, CloudFormation does not support self-signed ACM certificate
  # so I have to create a Lambda function which will perform the upload automatically
  LambdaCreateACMCertificate:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: "Lambda IAM role has permissions to write CloudWatch log and is defined on security template"
          - id: W89 # Lambda functions should be deployed inside a VPC
            reason: "Does not require VPC access"
          - id: W92 # Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions
            reason: "Not required"
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |

          '''
          This function is only executed during the first install of your Aligo HPC cluster
          This creates a self-signed certificate used by your ApplicationLoadBalancer.
          If a default SOCA certificate is deployed, this script will re-use it and won't create a new one.
          This is STRONGLY RECOMMENDED for you to upload your own certificate on ACM and update the Load balancer with your personal/corporate certificate
          '''

          import boto3
          import os
          import subprocess
          import time
          import cfnresponse

          def generate_cert(event, context):
              output = {}
              client_acm = boto3.client('acm')
              check_existing = client_acm.list_certificates(CertificateStatuses=['ISSUED'])
              for cert in check_existing['CertificateSummaryList']:
                  if 'SOCA.DEFAULT.CREATE.YOUR.OWN.CERT' == cert['DomainName']:
                      output['ACMCertificateArn'] = cert['CertificateArn']

              if 'ACMCertificateArn' in output.keys():
                cfnresponse.send(event, context, cfnresponse.SUCCESS, output, 'Using existing Self Signed')
              else:
                LoadBalancerDNSName = event['ResourceProperties']['LoadBalancerDNSName']
                ClusterId = event['ResourceProperties']['ClusterId']
                subprocess.check_output("openssl genrsa 2048 > /tmp/server.key", shell=True)
                subprocess.check_output("openssl req -new -x509 -sha1 -nodes -days 3650  -key /tmp/server.key -subj '/C=US/ST=California/L=Sunnyvale/O="+ClusterId+"/CN=SOCA.DEFAULT.CREATE.YOUR.OWN.CERT' > /tmp/server.crt", shell=True)
                key = (open("/tmp/server.key","r")).read()
                crt = (open("/tmp/server.crt","r")).read()

                try:
                  response = client_acm.import_certificate(Certificate=crt, PrivateKey=key)
                  time.sleep(30)
                  output['ACMCertificateArn'] = response['CertificateArn']
                  client_acm.add_tags_to_certificate(
                      CertificateArn=response['CertificateArn'],
                      Tags=[
                        {
                          'Key': 'Name',
                          'Value': 'Soca_ALB_Cerficate'
                         }
                  ])
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, output, 'Created Self Signed')

                except Exception as e:
                  cfnresponse.send(event, context, cfnresponse.FAILED, output, str(e))

      Description: Create first self-signed certificate for ALB
      FunctionName: !Sub ${ClusterId}-CreateACMCertificate
      Handler: index.generate_cert
      MemorySize: 128
      Role: !Ref LambdaACMIAMRoleArn
      Runtime: python3.6
      Timeout: 60
      Tags:
        - Key: soca:ClusterId
          Value: !Ref ClusterId

  # Move this behind an internet facing NLB so that can create an endpoint service using the NLB.
  # See https://aws.amazon.com/blogs/networking-and-content-delivery/using-static-ip-addresses-for-application-load-balancers/
  ApplicationLoadBalancer:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28 # Resource found with an explicit name, this disallows updates that require replacement of this resource
            reason: Need consistent name. Shouldn't require replacement
          - id: W52 # Elastic Load Balancer V2 should have access logging enabled
            reason: "Permission issues with bucket"
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${ClusterId}-viewer
      Scheme: !If [ PublicVpc, internet-facing, internal ]
      LoadBalancerAttributes:
        # - Key: access_logs.s3.enabled
        #   Value: true
        # - Key: access_logs.s3.bucket
        #   Value: !Ref S3InstallBucket
        # - Key: access_logs.s3.prefix
        #   Value: !Sub "logs/${S3InstallFolder}/WebUIALB_AccessLogs"
        - Key: "routing.http.drop_invalid_header_fields.enabled"
          Value: true
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !If [ PublicVpc, !Ref PublicSubnet1, !Ref PrivateSubnet1 ]
        - !If [ PublicVpc, !Ref PublicSubnet2, !Ref PrivateSubnet2 ]
        - !If [ PublicVpc, !If [HasPublicSubnet3, !Ref PublicSubnet3, !Ref "AWS::NoValue"], !If [HasPrivateSubnet3, !Ref PrivateSubnet3, !Ref "AWS::NoValue"] ]
      Tags:
        - Key: Name
          Value: !Sub ${ClusterId}-viewer
        - Key: soca:ClusterId
          Value: !Ref ClusterId
      Type: application

  RetrieveACMCertificateArn:
    DependsOn: ApplicationLoadBalancer
    Type: Custom::CreateResources
    Properties:
      ServiceToken: !GetAtt LambdaCreateACMCertificate.Arn
      LoadBalancerDNSName: !GetAtt ApplicationLoadBalancer.DNSName
      ClusterId: !Sub ${ClusterId}

  HTTPSLoadBalancerListener:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W55
            reason: "Using AWS recommended policy"

    DependsOn: RetrieveACMCertificateArn
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      SslPolicy: ELBSecurityPolicy-2016-08
      Certificates:
        - CertificateArn: !GetAtt RetrieveACMCertificateArn.ACMCertificateArn
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupSocaWebUI

  ESLoadBalancerListenerRule:
    DependsOn:
      - HTTPSLoadBalancerListener
      - TargetGroupES
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupES
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
             Values:
               - "/_plugin/kibana/*"
      ListenerArn: !Ref HTTPSLoadBalancerListener
      Priority: 1

  HTTPLoadBalancerListener:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W56
            reason: "HTTP listener is just there to do HTTPS redirect"
    DependsOn: ApplicationLoadBalancer
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Host: "#{host}"
            Path: "/#{path}"
            Port: 443
            Protocol: HTTPS
            Query: "#{query}"
            StatusCode: HTTP_301

  # This section below add a rule for Soca Web UI hosted on the scheduler host
  TargetGroupSocaWebUI:
    DependsOn: ApplicationLoadBalancer
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ClusterId}-WebUi
      VpcId: !Ref VpcId
      Port: 8443
      Protocol: HTTPS
      TargetType: instance
      Targets:
        - Id: !Ref SchedulerInstanceId
      HealthCheckPath: "/ping"

  TargetGroupES:
    DependsOn: ApplicationLoadBalancer
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ClusterId}-ES
      VpcId: !Ref VpcId
      Port: 443
      Protocol: HTTPS
      TargetType: ip
      Targets:
        - Id: !Select [0, !Split [ ",", !Ref ESDomainIPAddresses ] ]
        - Id: !Select [1, !Split [ ",", !Ref ESDomainIPAddresses ] ]
        - Id: !Select [2, !Split [ ",", !Ref ESDomainIPAddresses ] ]
        - Id: !Select [3, !Split [ ",", !Ref ESDomainIPAddresses ] ]
        - Id: !Select [4, !Split [ ",", !Ref ESDomainIPAddresses ] ]
        - Id: !Select [5, !Split [ ",", !Ref ESDomainIPAddresses ] ]
      HealthCheckPath: "/"

  LoadBalancerEgressES0:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !Join ["", [!Select [0, !Split [ ",", !Ref ESDomainIPAddresses ] ], "/32"] ]
      GroupId: !Ref LoadBalancerSecurityGroup
      Description: "ElasticSearch0"

  LoadBalancerEgressES1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !Join ["", [!Select [1, !Split [ ",", !Ref ESDomainIPAddresses ] ], "/32"] ]
      GroupId: !Ref LoadBalancerSecurityGroup
      Description: "ElasticSearch1"

  LoadBalancerEgressES2:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !Join ["", [!Select [2, !Split [ ",", !Ref ESDomainIPAddresses ] ], "/32"] ]
      GroupId: !Ref LoadBalancerSecurityGroup
      Description: "ElasticSearch2"

  LoadBalancerEgressES3:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !Join ["", [!Select [3, !Split [ ",", !Ref ESDomainIPAddresses ] ], "/32"] ]
      GroupId: !Ref LoadBalancerSecurityGroup
      Description: "ElasticSearch3"

  LoadBalancerEgressES4:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !Join ["", [!Select [4, !Split [ ",", !Ref ESDomainIPAddresses ] ], "/32"] ]
      GroupId: !Ref LoadBalancerSecurityGroup
      Description: "ElasticSearch4"

  LoadBalancerEgressES5:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !Join ["", [!Select [5, !Split [ ",", !Ref ESDomainIPAddresses ] ], "/32"] ]
      GroupId: !Ref LoadBalancerSecurityGroup
      Description: "ElasticSearch5"

  #============================================================================
  # Create private endpoint service
  #============================================================================
  # See https://aws.amazon.com/blogs/networking-and-content-delivery/using-static-ip-addresses-for-application-load-balancers/

  # NLB for the endpoint service
  # Forwards to the private ALB
  WebUINLB:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          # - id: W28 # Resource found with an explicit name, this disallows updates that require replacement of this resource
          #   reason: Need consistent name. Shouldn't require replacement
          - id: W52 # Elastic Load Balancer V2 should have access logging enabled
            reason: "Permission issues with bucket"
    DependsOn: ApplicationLoadBalancer
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      # Name: !Sub ${ClusterId}-NLB
      Type: network
      Scheme: !If [ PublicVpc, internet-facing, internal ]
      LoadBalancerAttributes:
        # - Key: access_logs.s3.enabled
        #   Value: true
        # - Key: access_logs.s3.bucket
        #   Value: !Ref S3InstallBucket
        # - Key: access_logs.s3.prefix
        #   Value: !Sub "logs/${S3InstallFolder}/WebUINLB_AccessLogs"
        - Key: "load_balancing.cross_zone.enabled"
          Value: true
      Subnets:
        - !If [ PublicVpc, !Ref PublicSubnet1, !Ref PrivateSubnet1 ]
        - !If [ PublicVpc, !Ref PublicSubnet2, !Ref PrivateSubnet2 ]
        - !If [ PublicVpc, !If [HasPublicSubnet3, !Ref PublicSubnet3, !Ref "AWS::NoValue"], !If [HasPrivateSubnet3, !Ref PrivateSubnet3, !Ref "AWS::NoValue"] ]
      Tags:
        - Key: Name
          Value: !Sub ${ClusterId}-viewer-nlb
        - Key: soca:ClusterId
          Value: !Ref ClusterId

  WebUINLBEni1:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !Ref GetELBPrivateIPLambdaArn
      LoadBalancerArn: !Ref WebUINLB
      VpcId: !Ref VpcId
      SubnetId: !If [ PublicVpc, !Ref PublicSubnet1, !Ref PrivateSubnet1 ]

  WebUINLBEni2:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !Ref GetELBPrivateIPLambdaArn
      LoadBalancerArn: !Ref WebUINLB
      VpcId: !Ref VpcId
      SubnetId: !If [ PublicVpc, !Ref PublicSubnet2, !Ref PrivateSubnet2 ]

  WebUINLBEni3:
    Condition: CreateWebUINLBEni3
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !Ref GetELBPrivateIPLambdaArn
      LoadBalancerArn: !Ref WebUINLB
      VpcId: !Ref VpcId
      SubnetId: !If [ PublicVpc, !Ref PublicSubnet3, !Ref PrivateSubnet3 ]

  LoadBalancerIngressNLB1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !Join ["", [!GetAtt WebUINLBEni1.IpAddress, "/32"] ]
      GroupId: !Ref LoadBalancerSecurityGroup
      Description: "WebUINLB health checks"

  LoadBalancerIngressNLB2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !Join ["", [!GetAtt WebUINLBEni2.IpAddress, "/32"] ]
      GroupId: !Ref LoadBalancerSecurityGroup
      Description: "WebUINLB health checks"

  LoadBalancerIngressNLB3:
    Condition: CreateWebUINLBEni3
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: !Join ["", [!GetAtt WebUINLBEni3.IpAddress, "/32"] ]
      GroupId: !Ref LoadBalancerSecurityGroup
      Description: "WebUINLB health checks"

  WebUINLBPublicALBTargetGroup:
    DependsOn: ApplicationLoadBalancer
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ClusterId}-WebUiNLB
      TargetType: ip
      Protocol: TCP
      VpcId: !Ref VpcId
      Port: 443
      # Targets are added by the Lambda because they change over time

  WebUINLBPublicHttpsListener:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W55
            reason: "Using AWS recommended policy"
    DependsOn: RetrieveACMCertificateArn
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref WebUINLB
      Port: 443
      Protocol: TCP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebUINLBPublicALBTargetGroup

  WebUIEndpointService:
    Type: AWS::EC2::VPCEndpointService
    Properties:
      # For security reasons require acceptance before the endpoint will work
      AcceptanceRequired: true
      NetworkLoadBalancerArns:
        - !Ref WebUINLB

  WebUIEndpointServiceTags:
    DependsOn: WebUIEndpointService
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !Ref TagEC2ResourceLambdaArn
      ResourceId: !Ref WebUIEndpointService
      Tags:
        - Key: Name
          Value: !Sub "${ClusterId}-WebUIEndpointService"
        - Key: soca:ClusterId
          Value: !Ref ClusterId

  WebUIEndpointServiceConnectionNotification:
    Type: AWS::EC2::VPCEndpointConnectionNotification
    Properties:
      ConnectionEvents:
        - Connect
        - Accept
      ConnectionNotificationArn: !Ref WebUIEndpointServiceConnectionSnsArn
      ServiceId: !Ref WebUIEndpointService

  UpdateNLBTargetLambdaRole:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "* is reduced to minimal pattern"
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: GetNLBIP
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DeleteLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":logs:", !Ref "AWS::Region", ":", !Ref  "AWS::AccountId", ":log-group:/aws/lambda/", !Ref ClusterId, "*"] ]

              - Effect: Allow
                Action:
                  - elasticloadbalancing:DescribeLoadBalancers
                  - elasticloadbalancing:Describe*
                  - elasticloadbalancing:RegisterTargets
                  - elasticloadbalancing:DeregisterTargets
                  - ec2:DescribeNetworkInterfaces
                Resource:
                  - '*'

  UpdateNLBTargetLambda:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89 # Lambda functions should be deployed inside a VPC
            reason: "Does not require VPC access"
          - id: W92 # Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions
            reason: "Not required"
    DependsOn: ApplicationLoadBalancer
    Type: AWS::Lambda::Function
    Properties:
      Description: "Update NLB target with ApplicationLoadBalancer IP addresses. Called every minute by CloudWatch event."
      FunctionName: !Sub "${ClusterId}-UpdateNLBTarget"
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt UpdateNLBTargetLambdaRole.Arn
      Runtime: python3.7
      Timeout: 180
      Tags:
        - Key: soca:ClusterId
          Value: !Ref ClusterId
      Environment:
        Variables:
          LoadBalancerArn: !Ref ApplicationLoadBalancer
          VpcId: !Ref VpcId
          TargetGroupArn: !Ref WebUINLBPublicALBTargetGroup
          ALB_LISTENER: "443"
      Code:
        ZipFile: !Sub |
          import cfnresponse
          import boto3
          import logging
          import os
          import re
          '''
          Update the NLB target with the latest IP addresses of the ApplicationLoadBalancer
          '''
          logging.getLogger().setLevel(logging.INFO)

          ALB_LISTENER = int(os.environ['ALB_LISTENER'])

          elbv2client = boto3.client('elbv2')

          def get_elb_ip_addresses(loadBalancerId, vpcId):
              ec2_client = boto3.client('ec2')
              filters = [
                {'Name': 'description', 'Values': ['ELB ' + loadBalancerId]},
                {'Name': 'vpc-id', 'Values': [vpcId]}
              ]
              response = ec2_client.describe_network_interfaces(Filters=filters)
              ipAddresses = []
              for networkInterface in response['NetworkInterfaces']:
                for privateIpAddress in networkInterface['PrivateIpAddresses']:
                  ipAddress = privateIpAddress['PrivateIpAddress']
                  logging.info("ipAddress:" + ipAddress)
                  ipAddresses.append(ipAddress)
              return ipAddresses

          def get_registered_ip_addresses(target_group_arn):
              registered_ip_list = []
              try:
                  response = elbv2client.describe_target_health(TargetGroupArn=target_group_arn)
                  registered_ip_count = len(response['TargetHealthDescriptions'])
                  logging.info("Number of currently registered IP: " + str(registered_ip_count))
                  for target in response['TargetHealthDescriptions']:
                      registered_ip = target['Target']['Id']
                      state = target['TargetHealth']['State']
                      if state in ['draining']:
                          continue
                      registered_ip_list.append(registered_ip)
              except ClientError as e:
                  logging.exception(e)
              return registered_ip_list

          def register_target(tg_arn, ipAddresses):
              try:
                  new_target_list = target_group_list(ipAddresses)
                  elbv2client.register_targets(
                      TargetGroupArn=tg_arn,
                      Targets=new_target_list
                  )
              except ClientError as e:
                  logging.exception(e.response['Error']['Message'])

          def deregister_target(tg_arn, ipAddresses):
              try:
                  new_target_list = target_group_list(ipAddresses)
                  elbv2client.deregister_targets(
                      TargetGroupArn=tg_arn,
                      Targets=new_target_list
                  )
              except ClientError as e:
                  logging.exception(e.response['Error']['Message'])

          def target_group_list(ip_list):
              target_list = []
              for ip in ip_list:
                  target = {
                      'Id': ip,
                      'Port': ALB_LISTENER,
                  }
                  target_list.append(target)
              return target_list

          def lambda_handler(event, context):
            try:
              loadBalancerArn = os.environ['LoadBalancerArn']
              logging.info("loadBalancerArn: " + loadBalancerArn)
              targetGroupArn = os.environ['TargetGroupArn']
              logging.info("targetGroupArn: " + targetGroupArn)
              vpcId = os.environ['VpcId']
              logging.info("vpcId: " + vpcId)

              loadBalancerId = re.sub(r'^.+:loadbalancer/', '', loadBalancerArn)
              logging.info("loadBalancerId: " + loadBalancerId)

              ipAddresses = get_elb_ip_addresses(loadBalancerId, vpcId)

              registeredIpAddresses = get_registered_ip_addresses(targetGroupArn)

              registerList = []
              deregisterList = []
              for ipAddress in ipAddresses:
                if ipAddress not in registeredIpAddresses:
                  registerList.append(ipAddress)
                  logging.info("Register " + ipAddress)
              for ipAddress in registeredIpAddresses:
                if ipAddress not in ipAddresses:
                  deregisterList.append(ipAddress)
                  logging.info("Deregister " + ipAddress)

              if registerList:
                register_target(targetGroupArn, registerList)

              if deregisterList:
                deregister_target(targetGroupArn, deregisterList)

            except:
              logging.exception("Caught exception")
              error_message = 'Exception getting ELB private IP addresses id for {}'.format(loadBalancerArn)

  UpdateNLBTargetLambdaRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: "rate(1 minute)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt UpdateNLBTargetLambda.Arn
          Id: TargetFunctionV1

  UpdateNLBTargetLambdaRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt UpdateNLBTargetLambda.Arn
      Principal: events.amazonaws.com
      Action: "lambda:InvokeFunction"
      SourceArn: !GetAtt UpdateNLBTargetLambdaRule.Arn

Outputs:
  LoadBalancerArn:
    Value: !Ref ApplicationLoadBalancer
  LoadBalancerDNSName:
    Value: !GetAtt ApplicationLoadBalancer.DNSName
  DefaultACMCert:
    Value: !GetAtt RetrieveACMCertificateArn.ACMCertificateArn
  WebUINLBArn:
    Value: !Ref WebUINLB
  WebUINLBDNSName:
    Value: !GetAtt WebUINLB.DNSName
  WebUIEndpointServiceId:
    Value: !Ref WebUIEndpointService
  WebUIEndpointServiceName:
    Value: !Sub "com.amazonaws.vpce.${AWS::Region}.${WebUIEndpointService}"
