AWSTemplateFormatVersion: 2010-09-09
Description: (SOCA) - Manage ELK stack
Parameters:
  ElasticSearchSecurityGroup:
    Type: String

  VpcId:
    Type: String

  PrivateSubnet1:
    Type: String

  PrivateSubnet2:
    Type: String

  ClusterId:
    Type: String

Resources:
  ElasticsearchDomain:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Domain Name is required if we want to restrict AccessPolicies to this resource only"
    Type: AWS::Elasticsearch::Domain
    Properties:
      ElasticsearchVersion: 7.9
      DomainName: !Sub ${ClusterId}
      DomainEndpointOptions:
         EnforceHTTPS: True
      NodeToNodeEncryptionOptions:
         Enabled: True
      EncryptionAtRestOptions:
         Enabled: True
      EBSOptions:
        VolumeSize: 100
        VolumeType: gp2
        EBSEnabled: true
      ElasticsearchClusterConfig:
        InstanceCount: 2
        InstanceType: m5.large.elasticsearch
        ZoneAwarenessEnabled: True
      SnapshotOptions:
        AutomatedSnapshotStartHour: '0'
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: '*'
            Action: 'es:ESHttp*'
            Resource: !Sub 'arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/${ClusterId}/*'

      AdvancedOptions:
        rest.action.multi.allow_explicit_index: 'true'

      Tags:
        - Key: Name
          Value: !Sub ${ClusterId}-analytics
        - Key: soca:ClusterId
          Value: !Ref ClusterId

      VPCOptions:
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        SecurityGroupIds:
          - !Ref ElasticSearchSecurityGroup

  GetESPrivateIPLambdaRole:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "DescribeNetworkInterfaces requires * resource-level permissions"
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: PreRequisite
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DeleteLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":logs:", !Ref "AWS::Region", ":", !Ref  "AWS::AccountId", ":log-group:/aws/lambda/", !Ref ClusterId, "*"] ]

              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                Resource:
                  - '*'
                Condition:
                  "ForAllValues:ArnEqualsIfExists":
                      "ec2:Vpc": !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:*:vpc/${VpcId}"

  GetESPrivateIPLambda:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89 # Lambda functions should be deployed inside a VPC
            reason: "Does not require VPC access"
          - id: W92 # Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions
            reason: "Not required"
    Type: AWS::Lambda::Function
    Properties:
      Description: Get ES private ip addresses
      FunctionName: !Sub "${ClusterId}-GetESPrivateIP"
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt GetESPrivateIPLambdaRole.Arn
      Runtime: python3.7
      Timeout: 180
      Tags:
        - Key: soca:ClusterId
          Value: !Ref ClusterId
      Code:
        ZipFile: !Sub |
          import cfnresponse
          import boto3
          import logging
          '''
          Get prefix list id
          '''
          logging.getLogger().setLevel(logging.INFO)
          def lambda_handler(event, context):
            try:
              logging.info("event: {}".format(event))
              requestType = event['RequestType']
              if requestType == 'Delete':
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, '')
                return
              ClusterId = event['ResourceProperties']['ClusterId']
              logging.info("ClusterId: " + ClusterId)
              ec2_client = boto3.client('ec2')
              response = ec2_client.describe_network_interfaces(Filters=[
                {'Name': 'description', 'Values': ['ES ' + ClusterId]},
                {'Name': 'requester-id', 'Values': ['amazon-elasticsearch']}])
              ipAddresses = []
              for networkInterface in response['NetworkInterfaces']:
                logging.debug(networkInterface)
                az = networkInterface['AvailabilityZone']
                logging.info("AZ: " + az)
                for privateIpAddress in networkInterface['PrivateIpAddresses']:
                  logging.debug(privateIpAddress)
                  ipAddress = privateIpAddress['PrivateIpAddress']
                  logging.info("ipAddress:" + ipAddress)
                  ipAddresses.append(ipAddress)
              if len(ipAddresses) == 0:
                msg = "No IP addresses found"
                logging.error(msg)
                cfnresponse.send(event, context, cfnresponse.FAILED, {'error': msg}, msg)
              else:
                ipAddressesStr = ",".join(ipAddresses)
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {'IpAddresses': ipAddressesStr}, str(ipAddresses))
            except:
              logging.exception("Caught exception")
              error_message = 'Exception getting private IP addresses for ES soca-{}'.format(ClusterId)
              cfnresponse.send(event, context, cfnresponse.FAILED, {'error': error_message}, error_message)

  ESCustomResource:
    DependsOn: ElasticsearchDomain
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt GetESPrivateIPLambda.Arn
      ClusterId: !Ref ClusterId

Outputs:
  ESDomainArn:
    Value: !GetAtt ElasticsearchDomain.DomainArn
  ESDomainEndpoint:
    Value: !GetAtt ElasticsearchDomain.DomainEndpoint
  ESDomainIPAddresses:
    Value: !GetAtt ESCustomResource.IpAddresses
